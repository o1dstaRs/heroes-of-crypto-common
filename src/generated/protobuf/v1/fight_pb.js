// source: fight.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.public.Fight', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.public.Fight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.public.Fight.repeatedFields_, null);
};
goog.inherits(proto.public.Fight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.public.Fight.displayName = 'proto.public.Fight';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.public.Fight.repeatedFields_ = [8,10,11,13,14,15,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.public.Fight.prototype.toObject = function(opt_includeInstance) {
  return proto.public.Fight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.public.Fight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public.Fight.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    currentLap: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gridType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    firstTurnMade: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fightFinished: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    previousTurnTeam: jspb.Message.getFieldWithDefault(msg, 6, 0),
    highestSpeedThisTurn: jspb.Message.getFieldWithDefault(msg, 7, 0),
    alreadyMadeTurnList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    alreadyMadeTurnByTeamMap: (f = msg.getAlreadyMadeTurnByTeamMap()) ? f.toObject(includeInstance, proto.public.StringList.toObject) : [],
    alreadyHourGlassList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    alreadyRepliedAttackList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    teamUnitsAliveMap: (f = msg.getTeamUnitsAliveMap()) ? f.toObject(includeInstance, undefined) : [],
    hourGlassQueueList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    moralePlusQueueList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    moraleMinusQueueList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    currentTurnStart: jspb.Message.getFieldWithDefault(msg, 16, 0),
    currentTurnEnd: jspb.Message.getFieldWithDefault(msg, 17, 0),
    currentLapTotalTimePerTeamMap: (f = msg.getCurrentLapTotalTimePerTeamMap()) ? f.toObject(includeInstance, undefined) : [],
    upNextList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    stepsMoraleMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    hasAdditionalTimeRequestedPerTeamMap: (f = msg.getHasAdditionalTimeRequestedPerTeamMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.public.Fight}
 */
proto.public.Fight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.public.Fight;
  return proto.public.Fight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.public.Fight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.public.Fight}
 */
proto.public.Fight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentLap(value);
      break;
    case 3:
      var value = /** @type {!proto.public.GridType} */ (reader.readEnum());
      msg.setGridType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstTurnMade(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFightFinished(value);
      break;
    case 6:
      var value = /** @type {!proto.public.Team} */ (reader.readEnum());
      msg.setPreviousTurnTeam(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighestSpeedThisTurn(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlreadyMadeTurn(value);
      break;
    case 9:
      var value = msg.getAlreadyMadeTurnByTeamMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.public.StringList.deserializeBinaryFromReader, 0, new proto.public.StringList());
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlreadyHourGlass(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlreadyRepliedAttack(value);
      break;
    case 12:
      var value = msg.getTeamUnitsAliveMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addHourGlassQueue(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addMoralePlusQueue(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addMoraleMinusQueue(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTurnStart(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTurnEnd(value);
      break;
    case 18:
      var value = msg.getCurrentLapTotalTimePerTeamMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addUpNext(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStepsMoraleMultiplier(value);
      break;
    case 21:
      var value = msg.getHasAdditionalTimeRequestedPerTeamMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readBool, null, 0, false);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.public.Fight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.public.Fight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.public.Fight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.public.Fight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCurrentLap();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGridType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFirstTurnMade();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFightFinished();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPreviousTurnTeam();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getHighestSpeedThisTurn();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAlreadyMadeTurnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getAlreadyMadeTurnByTeamMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.public.StringList.serializeBinaryToWriter);
  }
  f = message.getAlreadyHourGlassList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getAlreadyRepliedAttackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getTeamUnitsAliveMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getHourGlassQueueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getMoralePlusQueueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getMoraleMinusQueueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getCurrentTurnStart();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getCurrentTurnEnd();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getCurrentLapTotalTimePerTeamMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getUpNextList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getStepsMoraleMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getHasAdditionalTimeRequestedPerTeamMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(21, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.public.Fight.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.public.Fight.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.public.Fight.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 current_lap = 2;
 * @return {number}
 */
proto.public.Fight.prototype.getCurrentLap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setCurrentLap = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GridType grid_type = 3;
 * @return {!proto.public.GridType}
 */
proto.public.Fight.prototype.getGridType = function() {
  return /** @type {!proto.public.GridType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.public.GridType} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setGridType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool first_turn_made = 4;
 * @return {boolean}
 */
proto.public.Fight.prototype.getFirstTurnMade = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setFirstTurnMade = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fight_finished = 5;
 * @return {boolean}
 */
proto.public.Fight.prototype.getFightFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setFightFinished = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Team previous_turn_team = 6;
 * @return {!proto.public.Team}
 */
proto.public.Fight.prototype.getPreviousTurnTeam = function() {
  return /** @type {!proto.public.Team} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.public.Team} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setPreviousTurnTeam = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional int32 highest_speed_this_turn = 7;
 * @return {number}
 */
proto.public.Fight.prototype.getHighestSpeedThisTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setHighestSpeedThisTurn = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated string already_made_turn = 8;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getAlreadyMadeTurnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setAlreadyMadeTurnList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addAlreadyMadeTurn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearAlreadyMadeTurnList = function() {
  return this.setAlreadyMadeTurnList([]);
};


/**
 * map<uint32, StringList> already_made_turn_by_team = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.public.StringList>}
 */
proto.public.Fight.prototype.getAlreadyMadeTurnByTeamMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.public.StringList>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.public.StringList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearAlreadyMadeTurnByTeamMap = function() {
  this.getAlreadyMadeTurnByTeamMap().clear();
  return this;
};


/**
 * repeated string already_hour_glass = 10;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getAlreadyHourGlassList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setAlreadyHourGlassList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addAlreadyHourGlass = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearAlreadyHourGlassList = function() {
  return this.setAlreadyHourGlassList([]);
};


/**
 * repeated string already_replied_attack = 11;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getAlreadyRepliedAttackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setAlreadyRepliedAttackList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addAlreadyRepliedAttack = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearAlreadyRepliedAttackList = function() {
  return this.setAlreadyRepliedAttackList([]);
};


/**
 * map<uint32, uint32> team_units_alive = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.public.Fight.prototype.getTeamUnitsAliveMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearTeamUnitsAliveMap = function() {
  this.getTeamUnitsAliveMap().clear();
  return this;
};


/**
 * repeated string hour_glass_queue = 13;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getHourGlassQueueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setHourGlassQueueList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addHourGlassQueue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearHourGlassQueueList = function() {
  return this.setHourGlassQueueList([]);
};


/**
 * repeated string morale_plus_queue = 14;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getMoralePlusQueueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setMoralePlusQueueList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addMoralePlusQueue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearMoralePlusQueueList = function() {
  return this.setMoralePlusQueueList([]);
};


/**
 * repeated string morale_minus_queue = 15;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getMoraleMinusQueueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setMoraleMinusQueueList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addMoraleMinusQueue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearMoraleMinusQueueList = function() {
  return this.setMoraleMinusQueueList([]);
};


/**
 * optional int64 current_turn_start = 16;
 * @return {number}
 */
proto.public.Fight.prototype.getCurrentTurnStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setCurrentTurnStart = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 current_turn_end = 17;
 * @return {number}
 */
proto.public.Fight.prototype.getCurrentTurnEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setCurrentTurnEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * map<uint32, uint32> current_lap_total_time_per_team = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.public.Fight.prototype.getCurrentLapTotalTimePerTeamMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearCurrentLapTotalTimePerTeamMap = function() {
  this.getCurrentLapTotalTimePerTeamMap().clear();
  return this;
};


/**
 * repeated string up_next = 19;
 * @return {!Array<string>}
 */
proto.public.Fight.prototype.getUpNextList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setUpNextList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.addUpNext = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearUpNextList = function() {
  return this.setUpNextList([]);
};


/**
 * optional double steps_morale_multiplier = 20;
 * @return {number}
 */
proto.public.Fight.prototype.getStepsMoraleMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.setStepsMoraleMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * map<uint32, bool> has_additional_time_requested_per_team = 21;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,boolean>}
 */
proto.public.Fight.prototype.getHasAdditionalTimeRequestedPerTeamMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,boolean>} */ (
      jspb.Message.getMapField(this, 21, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.public.Fight} returns this
 */
proto.public.Fight.prototype.clearHasAdditionalTimeRequestedPerTeamMap = function() {
  this.getHasAdditionalTimeRequestedPerTeamMap().clear();
  return this;
};


goog.object.extend(exports, proto.public);
